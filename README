# Raft
## 总结
```
Raft协议是一个一致性的协议，算是简单版本的Paxos协议的变通实现，需要真实的使用Go代码
来实现一下，帮助理解，也揭开这些个所谓协议的神秘面纱！
```

# In Search of an Understandable Consensus Algorithm (Extend Version)

## 概述
Raft是一个共识的算法！
```
如何理解达成共识这个单词啊，其实就是一致性的另外一种说法而已，例如：开会研究达成了共识，意思
就是说意见统一了！
```
## leader的选举(Leader election)
### leader选举的规定
1. Election Safety:在某个时代，最多一个leader被选出出来
2. Leader Append-Only:leader不能覆盖或者是删除他自己的log，他只能新增新的log
3. Log Matching:如果两条log一样，那么他们之前的log都一样
4. Leader Completeness:凡是写入到log的，必须是大部分节点都已经写入成功的时候才会写入到log
5. State Machine Safety:如果一个index所指引的log被应用到状态机了，那么其他的服务不允许使用这个index了
### leader的选举过程
1. 各个node采用心跳的机制出发leader的选举
2. 当node启动的时候是Follower角色
3. Follower给自己的term+1，然后修改自己的角色为candidate，并且给自己投一票
4. 在此之后接收到别的RPC投票请求一律投递不同意
5. 宣传自己，朝向各个node发送投票的请求
6. 遇到以下三种情形决定生死：
```
1.这个node赢得了这次选举(超过半数的node投了他的票)
2.其他node获得了选举，并朝向他发送了通知(leader广而告之)
3.一个周期时间过后，没有任何胜者(预示着开始新一轮投票的开始)
```
## 日志复制(Log Replication)
## 安全性(Safety)